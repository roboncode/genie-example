// Code generated by mockery v1.1.0. DO NOT EDIT.

package mocks

import (
	store "example/internal/store"

	mock "github.com/stretchr/testify/mock"
)

// PersonStore is an autogenerated mock type for the PersonStore type
type PersonStore struct {
	mock.Mock
}

// CreatePerson provides a mock function with given fields: person
func (_m *PersonStore) CreatePerson(person *store.Person) error {
	ret := _m.Called(person)

	var r0 error
	if rf, ok := ret.Get(0).(func(*store.Person) error); ok {
		r0 = rf(person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRequest provides a mock function with given fields: id
func (_m *PersonStore) DeleteRequest(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPerson provides a mock function with given fields: id
func (_m *PersonStore) GetPerson(id string) (*store.Person, error) {
	ret := _m.Called(id)

	var r0 *store.Person
	if rf, ok := ret.Get(0).(func(string) *store.Person); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersons provides a mock function with given fields: filters
func (_m *PersonStore) GetPersons(filters *store.PersonFilters) ([]store.Person, error) {
	ret := _m.Called(filters)

	var r0 []store.Person
	if rf, ok := ret.Get(0).(func(*store.PersonFilters) []store.Person); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*store.PersonFilters) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePerson provides a mock function with given fields: id, person
func (_m *PersonStore) UpdatePerson(id string, person *store.Person) error {
	ret := _m.Called(id, person)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *store.Person) error); ok {
		r0 = rf(id, person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
