// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: person.proto

package pkg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _person_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Person with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Person) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Enabled

	// no validation rules for Type

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PersonValidationError is the validation error returned by Person.Validate if
// the designated constraints aren't met.
type PersonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonValidationError) ErrorName() string { return "PersonValidationError" }

// Error satisfies the builtin error interface
func (e PersonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonValidationError{}

// Validate checks the field values on Persons with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Persons) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PersonsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PersonsValidationError is the validation error returned by Persons.Validate
// if the designated constraints aren't met.
type PersonsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonsValidationError) ErrorName() string { return "PersonsValidationError" }

// Error satisfies the builtin error interface
func (e PersonsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersons.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonsValidationError{}

// Validate checks the field values on Person_Id with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Person_Id) Validate() error {
	if m == nil {
		return nil
	}

	if !_Person_Id_Id_Pattern.MatchString(m.GetId()) {
		return Person_IdValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-f\\\\d]{24}$\"",
		}
	}

	return nil
}

// Person_IdValidationError is the validation error returned by
// Person_Id.Validate if the designated constraints aren't met.
type Person_IdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Person_IdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Person_IdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Person_IdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Person_IdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Person_IdValidationError) ErrorName() string { return "Person_IdValidationError" }

// Error satisfies the builtin error interface
func (e Person_IdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerson_Id.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Person_IdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Person_IdValidationError{}

var _Person_Id_Id_Pattern = regexp.MustCompile("^[a-f\\d]{24}$")

// Validate checks the field values on Person_Filters with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Person_Filters) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enabled

	// no validation rules for Type

	// no validation rules for Skip

	// no validation rules for Limit

	return nil
}

// Person_FiltersValidationError is the validation error returned by
// Person_Filters.Validate if the designated constraints aren't met.
type Person_FiltersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Person_FiltersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Person_FiltersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Person_FiltersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Person_FiltersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Person_FiltersValidationError) ErrorName() string { return "Person_FiltersValidationError" }

// Error satisfies the builtin error interface
func (e Person_FiltersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerson_Filters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Person_FiltersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Person_FiltersValidationError{}
