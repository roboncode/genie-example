// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: person.proto

package example

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _person_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreatePersonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Name

	// no validation rules for Email

	return nil
}

// CreatePersonRequestValidationError is the validation error returned by
// CreatePersonRequest.Validate if the designated constraints aren't met.
type CreatePersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePersonRequestValidationError) ErrorName() string {
	return "CreatePersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePersonRequestValidationError{}

// Validate checks the field values on GetPersonRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetPersonRequest_Id_Pattern.MatchString(m.GetId()) {
		return GetPersonRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-f\\\\d]{24}$\"",
		}
	}

	return nil
}

// GetPersonRequestValidationError is the validation error returned by
// GetPersonRequest.Validate if the designated constraints aren't met.
type GetPersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonRequestValidationError) ErrorName() string { return "GetPersonRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonRequestValidationError{}

var _GetPersonRequest_Id_Pattern = regexp.MustCompile("^[a-f\\d]{24}$")

// Validate checks the field values on GetPersonsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPersonsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Skip

	// no validation rules for Limit

	return nil
}

// GetPersonsRequestValidationError is the validation error returned by
// GetPersonsRequest.Validate if the designated constraints aren't met.
type GetPersonsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonsRequestValidationError) ErrorName() string {
	return "GetPersonsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonsRequestValidationError{}

// Validate checks the field values on UpdatePersonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdatePersonRequest_Id_Pattern.MatchString(m.GetId()) {
		return UpdatePersonRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-f\\\\d]{24}$\"",
		}
	}

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Status

	return nil
}

// UpdatePersonRequestValidationError is the validation error returned by
// UpdatePersonRequest.Validate if the designated constraints aren't met.
type UpdatePersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePersonRequestValidationError) ErrorName() string {
	return "UpdatePersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePersonRequestValidationError{}

var _UpdatePersonRequest_Id_Pattern = regexp.MustCompile("^[a-f\\d]{24}$")

// Validate checks the field values on DeletePersonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeletePersonRequest_Id_Pattern.MatchString(m.GetId()) {
		return DeletePersonRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-f\\\\d]{24}$\"",
		}
	}

	return nil
}

// DeletePersonRequestValidationError is the validation error returned by
// DeletePersonRequest.Validate if the designated constraints aren't met.
type DeletePersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePersonRequestValidationError) ErrorName() string {
	return "DeletePersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePersonRequestValidationError{}

var _DeletePersonRequest_Id_Pattern = regexp.MustCompile("^[a-f\\d]{24}$")

// Validate checks the field values on Person with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Person) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Status

	// no validation rules for Name

	// no validation rules for Email

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PersonValidationError is the validation error returned by Person.Validate if
// the designated constraints aren't met.
type PersonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonValidationError) ErrorName() string { return "PersonValidationError" }

// Error satisfies the builtin error interface
func (e PersonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonValidationError{}

// Validate checks the field values on Persons with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Persons) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PersonsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PersonsValidationError is the validation error returned by Persons.Validate
// if the designated constraints aren't met.
type PersonsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonsValidationError) ErrorName() string { return "PersonsValidationError" }

// Error satisfies the builtin error interface
func (e PersonsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersons.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonsValidationError{}
