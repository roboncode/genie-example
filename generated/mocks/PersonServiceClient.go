// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import emptypb "google.golang.org/protobuf/types/known/emptypb"
import example "example/generated"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// PersonServiceClient is an autogenerated mock type for the PersonServiceClient type
type PersonServiceClient struct {
	mock.Mock
}

// CreatePerson provides a mock function with given fields: ctx, in, opts
func (_m *PersonServiceClient) CreatePerson(ctx context.Context, in *example.CreatePersonRequest, opts ...grpc.CallOption) (*example.Person, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *example.Person
	if rf, ok := ret.Get(0).(func(context.Context, *example.CreatePersonRequest, ...grpc.CallOption) *example.Person); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *example.CreatePersonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePerson provides a mock function with given fields: ctx, in, opts
func (_m *PersonServiceClient) DeletePerson(ctx context.Context, in *example.DeletePersonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *example.DeletePersonRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *example.DeletePersonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPerson provides a mock function with given fields: ctx, in, opts
func (_m *PersonServiceClient) GetPerson(ctx context.Context, in *example.GetPersonRequest, opts ...grpc.CallOption) (*example.Person, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *example.Person
	if rf, ok := ret.Get(0).(func(context.Context, *example.GetPersonRequest, ...grpc.CallOption) *example.Person); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *example.GetPersonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersons provides a mock function with given fields: ctx, in, opts
func (_m *PersonServiceClient) GetPersons(ctx context.Context, in *example.GetPersonsRequest, opts ...grpc.CallOption) (*example.Persons, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *example.Persons
	if rf, ok := ret.Get(0).(func(context.Context, *example.GetPersonsRequest, ...grpc.CallOption) *example.Persons); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.Persons)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *example.GetPersonsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePerson provides a mock function with given fields: ctx, in, opts
func (_m *PersonServiceClient) UpdatePerson(ctx context.Context, in *example.UpdatePersonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *example.UpdatePersonRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *example.UpdatePersonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
