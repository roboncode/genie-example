// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

package example

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("app.proto", fileDescriptor_e0f9056a14b86d47) }

var fileDescriptor_e0f9056a14b86d47 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x95, 0x0d, 0x75, 0x9a, 0x55, 0xd1, 0xd6, 0x93, 0x26, 0x2d, 0xec, 0x60, 0xf5, 0x18,
	0xd1, 0x78, 0x94, 0x9e, 0xca, 0x85, 0x02, 0x13, 0x5c, 0x90, 0x50, 0x81, 0x0b, 0x37, 0x27, 0xf9,
	0x96, 0x1a, 0xa5, 0xb6, 0x67, 0xbb, 0x74, 0x13, 0x70, 0xe1, 0x11, 0xca, 0x0d, 0x89, 0x17, 0x40,
	0xe2, 0x09, 0x78, 0x04, 0x0e, 0x1c, 0x78, 0x05, 0xde, 0x81, 0x2b, 0xaa, 0xdd, 0x76, 0xa1, 0xe9,
	0x44, 0xc5, 0x2d, 0xfe, 0xff, 0xbf, 0xcf, 0xf9, 0xf9, 0xcb, 0xdf, 0x41, 0xfb, 0x4c, 0xa9, 0x58,
	0x69, 0x69, 0x25, 0xde, 0x83, 0x0b, 0x36, 0x56, 0x05, 0x84, 0xb7, 0xdd, 0x3a, 0xed, 0xe4, 0x20,
	0x3a, 0x66, 0xca, 0xf2, 0x1c, 0x34, 0x95, 0xca, 0x72, 0x29, 0x0c, 0x65, 0x42, 0x48, 0xcb, 0xdc,
	0xb3, 0x6f, 0x0b, 0x8f, 0x73, 0x29, 0xf3, 0x02, 0x28, 0x53, 0x7c, 0x83, 0x7b, 0x6b, 0xe1, 0xba,
	0x55, 0x32, 0x39, 0xa3, 0x30, 0x56, 0xf6, 0x72, 0x61, 0xd6, 0x15, 0x68, 0x23, 0x85, 0x5f, 0x75,
	0x7f, 0xd7, 0x10, 0x1a, 0x28, 0xf5, 0x1c, 0xf4, 0x1b, 0x9e, 0x02, 0xfe, 0x16, 0xa0, 0xfa, 0x43,
	0x0d, 0xcc, 0xc2, 0x33, 0x57, 0x85, 0x8f, 0xe3, 0x05, 0x60, 0x5c, 0x96, 0x87, 0x70, 0x3e, 0x01,
	0x63, 0xc3, 0xc6, 0xca, 0xf5, 0x7a, 0xfb, 0xdd, 0x6c, 0x90, 0xe0, 0xa6, 0x2f, 0x35, 0x84, 0x11,
	0xff, 0xae, 0x30, 0x5a, 0x57, 0x08, 0x13, 0x19, 0xd1, 0x60, 0x27, 0x5a, 0x10, 0x3b, 0x02, 0x22,
	0x60, 0x4a, 0xfc, 0x16, 0xdd, 0x26, 0x53, 0xaa, 0xe0, 0xa9, 0x3b, 0x10, 0x7d, 0x6d, 0xa4, 0xe8,
	0x57, 0x94, 0x0f, 0x3f, 0x7f, 0x7d, 0xdc, 0x69, 0xb5, 0xeb, 0xee, 0xf8, 0x7e, 0x43, 0xd3, 0x0f,
	0x22, 0xfc, 0x39, 0x40, 0xfb, 0x8f, 0xc1, 0x2e, 0xd0, 0x8f, 0x56, 0x70, 0x2b, 0xed, 0x5a, 0xee,
	0x6c, 0x36, 0x78, 0x82, 0x9b, 0x43, 0x07, 0x54, 0xe2, 0xae, 0x28, 0x5b, 0xd3, 0x1d, 0xe0, 0x56,
	0x99, 0x8e, 0xbe, 0xe5, 0xd9, 0x7b, 0xfc, 0x35, 0x40, 0x68, 0xc5, 0x62, 0x70, 0x58, 0x05, 0x34,
	0x4b, 0xc2, 0xe6, 0x1a, 0xa1, 0x69, 0x9f, 0xcf, 0x06, 0xaf, 0xf0, 0xd1, 0x15, 0x50, 0xc1, 0x8d,
	0x25, 0xf2, 0x6c, 0x01, 0x66, 0xc2, 0xeb, 0xad, 0xad, 0xa1, 0x6f, 0xe2, 0xbf, 0x46, 0x3a, 0xe7,
	0xad, 0xbf, 0x54, 0xd9, 0xa6, 0x34, 0x94, 0xe5, 0x25, 0xf3, 0x61, 0xec, 0x73, 0x17, 0x2f, 0x73,
	0x17, 0x9f, 0xce, 0x73, 0xd7, 0xce, 0xdd, 0x70, 0x7d, 0x47, 0x79, 0xb8, 0xeb, 0xca, 0xd6, 0x9c,
	0x87, 0x61, 0x75, 0xb8, 0xf3, 0xef, 0xff, 0x25, 0x40, 0xf5, 0x47, 0x50, 0xc0, 0x06, 0xde, 0xb2,
	0xfc, 0x2f, 0x5e, 0x17, 0x86, 0x96, 0xef, 0xb8, 0xa2, 0x33, 0x61, 0xc3, 0x03, 0xff, 0x47, 0x18,
	0xa2, 0x2a, 0xef, 0x83, 0x1f, 0xc1, 0x6c, 0xf0, 0x3d, 0xc0, 0x80, 0x1a, 0xa7, 0x9e, 0x91, 0x18,
	0x7f, 0x09, 0xdb, 0x4f, 0x11, 0x1a, 0xca, 0x84, 0xbc, 0x60, 0x97, 0x85, 0xd4, 0x38, 0x1a, 0x59,
	0xab, 0x4c, 0x9f, 0xd2, 0x9c, 0xdb, 0xd1, 0x24, 0x89, 0x53, 0x39, 0xa6, 0x5a, 0x26, 0x52, 0xa4,
	0x32, 0x03, 0x9a, 0x83, 0xe0, 0xd0, 0x59, 0xfe, 0x44, 0x0e, 0x56, 0xc6, 0xfd, 0x7c, 0xcc, 0x78,
	0x31, 0x2f, 0xee, 0xee, 0xde, 0x89, 0x4f, 0xa2, 0x20, 0xd8, 0x86, 0x76, 0x78, 0x0f, 0xed, 0xf6,
	0x4e, 0x7a, 0xb8, 0x87, 0x22, 0x9f, 0x26, 0xc8, 0xc8, 0x74, 0x04, 0xfe, 0x8e, 0x6a, 0x30, 0x72,
	0xa2, 0x53, 0x20, 0x99, 0x04, 0x43, 0x84, 0xb4, 0x04, 0x2e, 0xb8, 0xb1, 0x31, 0xae, 0xa1, 0x1b,
	0x9f, 0x76, 0x82, 0xbd, 0xa4, 0xe6, 0xe6, 0x78, 0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8,
	0xbf, 0x19, 0x52, 0xdf, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppServiceClient interface {
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*Person, error)
	GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*Person, error)
	GetPersons(ctx context.Context, in *GetPersonsRequest, opts ...grpc.CallOption) (*Persons, error)
	UpdatePerson(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeletePerson(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type appServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppServiceClient(cc *grpc.ClientConn) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/example.AppService/CreatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/example.AppService/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetPersons(ctx context.Context, in *GetPersonsRequest, opts ...grpc.CallOption) (*Persons, error) {
	out := new(Persons)
	err := c.cc.Invoke(ctx, "/example.AppService/GetPersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdatePerson(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/example.AppService/UpdatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeletePerson(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/example.AppService/DeletePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
type AppServiceServer interface {
	CreatePerson(context.Context, *CreatePersonRequest) (*Person, error)
	GetPerson(context.Context, *GetPersonRequest) (*Person, error)
	GetPersons(context.Context, *GetPersonsRequest) (*Persons, error)
	UpdatePerson(context.Context, *UpdatePersonRequest) (*empty.Empty, error)
	DeletePerson(context.Context, *DeletePersonRequest) (*empty.Empty, error)
}

// UnimplementedAppServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (*UnimplementedAppServiceServer) CreatePerson(ctx context.Context, req *CreatePersonRequest) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (*UnimplementedAppServiceServer) GetPerson(ctx context.Context, req *GetPersonRequest) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (*UnimplementedAppServiceServer) GetPersons(ctx context.Context, req *GetPersonsRequest) (*Persons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersons not implemented")
}
func (*UnimplementedAppServiceServer) UpdatePerson(ctx context.Context, req *UpdatePersonRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerson not implemented")
}
func (*UnimplementedAppServiceServer) DeletePerson(ctx context.Context, req *DeletePersonRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerson not implemented")
}

func RegisterAppServiceServer(s *grpc.Server, srv AppServiceServer) {
	s.RegisterService(&_AppService_serviceDesc, srv)
}

func _AppService_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AppService/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreatePerson(ctx, req.(*CreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AppService/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetPerson(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AppService/GetPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetPersons(ctx, req.(*GetPersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AppService/UpdatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdatePerson(ctx, req.(*UpdatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeletePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeletePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AppService/DeletePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeletePerson(ctx, req.(*DeletePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _AppService_CreatePerson_Handler,
		},
		{
			MethodName: "GetPerson",
			Handler:    _AppService_GetPerson_Handler,
		},
		{
			MethodName: "GetPersons",
			Handler:    _AppService_GetPersons_Handler,
		},
		{
			MethodName: "UpdatePerson",
			Handler:    _AppService_UpdatePerson_Handler,
		},
		{
			MethodName: "DeletePerson",
			Handler:    _AppService_DeletePerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
